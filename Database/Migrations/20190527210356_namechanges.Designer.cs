// <auto-generated />
using System;
using Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190527210356_namechanges")]
    partial class namechanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.Archivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ruta");

                    b.HasKey("Id");

                    b.ToTable("Archivos");
                });

            modelBuilder.Entity("Database.Models.Asistencias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlumnoId");

                    b.Property<int?>("AulaId");

                    b.Property<DateTime>("Fecha");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("AulaId");

                    b.ToTable("Asistencias");
                });

            modelBuilder.Entity("Database.Models.Aula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MateriaId");

                    b.Property<string>("ProfesorId");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.HasIndex("ProfesorId");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("Database.Models.Barrios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barrio");

                    b.HasKey("Id");

                    b.ToTable("Barrios");
                });

            modelBuilder.Entity("Database.Models.CursosAlumnos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlumnoIdId");

                    b.Property<int?>("CursoIdId");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoIdId");

                    b.HasIndex("CursoIdId");

                    b.ToTable("CursosAlumnos");
                });

            modelBuilder.Entity("Database.Models.Domicilios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarrioId");

                    b.Property<string>("Calle");

                    b.Property<string>("Dpto");

                    b.Property<int?>("LocalidadId");

                    b.Property<string>("Nro");

                    b.Property<string>("Piso");

                    b.HasKey("Id");

                    b.HasIndex("BarrioId");

                    b.HasIndex("LocalidadId");

                    b.ToTable("Domicilios");
                });

            modelBuilder.Entity("Database.Models.Localidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Localidad");

                    b.HasKey("Id");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("Database.Models.Mensajes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CuerpoMensaje");

                    b.Property<string>("EmisorId");

                    b.Property<DateTime>("FechaEnviado");

                    b.Property<int?>("IdSalaId");

                    b.HasKey("Id");

                    b.HasIndex("EmisorId");

                    b.HasIndex("IdSalaId");

                    b.ToTable("Mensajes");
                });

            modelBuilder.Entity("Database.Models.Notas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlumnoId");

                    b.Property<int?>("AulaId");

                    b.Property<decimal>("Calificacion");

                    b.Property<DateTime>("Fecha");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("AulaId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("Database.Models.Personas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido");

                    b.Property<string>("Documento");

                    b.Property<string>("Domicilio");

                    b.Property<DateTime>("FechaNacimiento");

                    b.Property<int>("Genero");

                    b.Property<string>("LugarNacimiento");

                    b.Property<string>("Nombre");

                    b.Property<string>("TelefonoFijo");

                    b.Property<int>("TipoDocumento");

                    b.HasKey("Id");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Database.Models.Salas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescripciónSala");

                    b.Property<string>("NombreSala");

                    b.HasKey("Id");

                    b.ToTable("Salas");
                });

            modelBuilder.Entity("Database.Models.Usuarios", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PersonaId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("SalasId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SalasId");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuarios");
                });

            modelBuilder.Entity("Database.ModelsData.Materias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("Database.Models.Alumnos", b =>
                {
                    b.HasBaseType("Database.Models.Usuarios");


                    b.ToTable("Alumnos");

                    b.HasDiscriminator().HasValue("Alumnos");
                });

            modelBuilder.Entity("Database.Models.Profesores", b =>
                {
                    b.HasBaseType("Database.Models.Usuarios");


                    b.ToTable("Profesores");

                    b.HasDiscriminator().HasValue("Profesores");
                });

            modelBuilder.Entity("Database.Models.Asistencias", b =>
                {
                    b.HasOne("Database.Models.Alumnos", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId");

                    b.HasOne("Database.Models.Aula", "Aula")
                        .WithMany()
                        .HasForeignKey("AulaId");
                });

            modelBuilder.Entity("Database.Models.Aula", b =>
                {
                    b.HasOne("Database.ModelsData.Materias", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId");

                    b.HasOne("Database.Models.Profesores", "Profesor")
                        .WithMany("Aulas")
                        .HasForeignKey("ProfesorId");
                });

            modelBuilder.Entity("Database.Models.CursosAlumnos", b =>
                {
                    b.HasOne("Database.Models.Alumnos", "AlumnoId")
                        .WithMany()
                        .HasForeignKey("AlumnoIdId");

                    b.HasOne("Database.Models.Aula", "CursoId")
                        .WithMany()
                        .HasForeignKey("CursoIdId");
                });

            modelBuilder.Entity("Database.Models.Domicilios", b =>
                {
                    b.HasOne("Database.Models.Barrios", "Barrio")
                        .WithMany()
                        .HasForeignKey("BarrioId");

                    b.HasOne("Database.Models.Localidades", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId");
                });

            modelBuilder.Entity("Database.Models.Mensajes", b =>
                {
                    b.HasOne("Database.Models.Usuarios", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId");

                    b.HasOne("Database.Models.Salas", "IdSala")
                        .WithMany()
                        .HasForeignKey("IdSalaId");
                });

            modelBuilder.Entity("Database.Models.Notas", b =>
                {
                    b.HasOne("Database.Models.Alumnos", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId");

                    b.HasOne("Database.Models.Aula", "Aula")
                        .WithMany()
                        .HasForeignKey("AulaId");
                });

            modelBuilder.Entity("Database.Models.Usuarios", b =>
                {
                    b.HasOne("Database.Models.Personas", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.HasOne("Database.Models.Salas")
                        .WithMany("ListaUsuarios")
                        .HasForeignKey("SalasId");
                });
#pragma warning restore 612, 618
        }
    }
}
